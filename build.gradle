buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'ReBack'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.projectlombok:lombok'

	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0' // 레이아웃 적용 thymeleaf

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'net.nurigo:javaSDK:2.2'
//	compile group: 'org.thymeleaf.extras', name:'thymeleaf-extras-java8time'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	// 오라클 클라우드에 접속하기 위한 라이브러리 추가
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	implementation 'com.oracle.database.security:osdt_cert'
	implementation 'com.oracle.database.security:oraclepki'
	implementation 'com.oracle.database.security:osdt_core'

	// DB 에러 해결하기 위한 것
//	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'


	// h2 데이터베이스
//	runtimeOnly 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

/**
 * comileQuerydsl.doFirst 추가
 */
//compileQuerydsl.doFirst {
//	if(file(querydslDir).exists() )
//		delete(file(querydslDir))
//}
